; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=i686-unknown-unknown -mattr=+avx2 -O3 -disable-strictnode-mutation | FileCheck %s --check-prefixes=CHECK,AVX1,AVX-32,AVX1-32
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx2 -O3 -disable-strictnode-mutation | FileCheck %s --check-prefixes=CHECK,AVX1,AVX-64,AVX1-64
; RUN: llc < %s -mtriple=i686-unknown-unknown -mattr=+avx512f -O3 -disable-strictnode-mutation | FileCheck %s --check-prefixes=CHECK,AVX512F,AVX-32,AVX512F-32
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx512f -O3 -disable-strictnode-mutation | FileCheck %s --check-prefixes=CHECK,AVX512F,AVX-64,AVX512F-64
; RUN: llc < %s -mtriple=i686-unknown-unknown -mattr=avx512vl -O3 -disable-strictnode-mutation | FileCheck %s --check-prefixes=CHECK,AVX512VL,AVX-32,AVX512VL-32
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=avx512vl -O3 -disable-strictnode-mutation | FileCheck %s --check-prefixes=CHECK,AVX512VL,AVX-64,AVX512VL-64
; RUN: llc < %s -mtriple=i686-unknown-unknown -mattr=avx512dq -O3 -disable-strictnode-mutation | FileCheck %s --check-prefixes=CHECK,AVX512DQ,AVX512DQ-32
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=avx512dq -O3 -disable-strictnode-mutation | FileCheck %s --check-prefixes=CHECK,AVX512DQ,AVX512DQ-64
; RUN: llc < %s -mtriple=i686-unknown-unknown -mattr=avx512dq,avx512vl -O3 -disable-strictnode-mutation | FileCheck %s --check-prefixes=CHECK,AVX512DQVL,AVX512DQVL-32
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=avx512dq,avx512vl -O3 -disable-strictnode-mutation | FileCheck %s --check-prefixes=CHECK,AVX512DQVL,AVX512DQVL-64

declare <8 x float> @llvm.experimental.constrained.sitofp.v8f32.v8i1(<8 x i1>, metadata, metadata)
declare <8 x float> @llvm.experimental.constrained.uitofp.v8f32.v8i1(<8 x i1>, metadata, metadata)
declare <8 x float> @llvm.experimental.constrained.sitofp.v8f32.v8i8(<8 x i8>, metadata, metadata)
declare <8 x float> @llvm.experimental.constrained.uitofp.v8f32.v8i8(<8 x i8>, metadata, metadata)
declare <8 x float> @llvm.experimental.constrained.sitofp.v8f32.v8i16(<8 x i16>, metadata, metadata)
declare <8 x float> @llvm.experimental.constrained.uitofp.v8f32.v8i16(<8 x i16>, metadata, metadata)
declare <8 x float> @llvm.experimental.constrained.sitofp.v8f32.v8i32(<8 x i32>, metadata, metadata)
declare <8 x float> @llvm.experimental.constrained.uitofp.v8f32.v8i32(<8 x i32>, metadata, metadata)
declare <4 x double> @llvm.experimental.constrained.sitofp.v4f64.v4i1(<4 x i1>, metadata, metadata)
declare <4 x double> @llvm.experimental.constrained.uitofp.v4f64.v4i1(<4 x i1>, metadata, metadata)
declare <4 x double> @llvm.experimental.constrained.sitofp.v4f64.v4i8(<4 x i8>, metadata, metadata)
declare <4 x double> @llvm.experimental.constrained.uitofp.v4f64.v4i8(<4 x i8>, metadata, metadata)
declare <4 x double> @llvm.experimental.constrained.sitofp.v4f64.v4i16(<4 x i16>, metadata, metadata)
declare <4 x double> @llvm.experimental.constrained.uitofp.v4f64.v4i16(<4 x i16>, metadata, metadata)
declare <4 x double> @llvm.experimental.constrained.sitofp.v4f64.v4i32(<4 x i32>, metadata, metadata)
declare <4 x double> @llvm.experimental.constrained.uitofp.v4f64.v4i32(<4 x i32>, metadata, metadata)
declare <4 x double> @llvm.experimental.constrained.sitofp.v4f64.v4i64(<4 x i64>, metadata, metadata)
declare <4 x double> @llvm.experimental.constrained.uitofp.v4f64.v4i64(<4 x i64>, metadata, metadata)

define <8 x float> @sitofp_v8i1_v8f32(<8 x i1> %x) #0 {
; CHECK-LABEL: sitofp_v8i1_v8f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmovzxwd {{.*#+}} ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero,xmm0[4],zero,xmm0[5],zero,xmm0[6],zero,xmm0[7],zero
; CHECK-NEXT:    vpslld $31, %ymm0, %ymm0
; CHECK-NEXT:    vpsrad $31, %ymm0, %ymm0
; CHECK-NEXT:    vcvtdq2ps %ymm0, %ymm0
; CHECK-NEXT:    ret{{[l|q]}}
 %result = call <8 x float> @llvm.experimental.constrained.sitofp.v8f32.v8i1(<8 x i1> %x,
                                                              metadata !"round.dynamic",
                                                              metadata !"fpexcept.strict") #0
  ret <8 x float> %result
}

define <8 x float> @uitofp_v8i1_v8f32(<8 x i1> %x) #0 {
; AVX-32-LABEL: uitofp_v8i1_v8f32:
; AVX-32:       # %bb.0:
; AVX-32-NEXT:    vpand {{\.LCPI.*}}, %xmm0, %xmm0
; AVX-32-NEXT:    vpmovzxwd {{.*#+}} ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero,xmm0[4],zero,xmm0[5],zero,xmm0[6],zero,xmm0[7],zero
; AVX-32-NEXT:    vcvtdq2ps %ymm0, %ymm0
; AVX-32-NEXT:    retl
;
; AVX-64-LABEL: uitofp_v8i1_v8f32:
; AVX-64:       # %bb.0:
; AVX-64-NEXT:    vpand {{.*}}(%rip), %xmm0, %xmm0
; AVX-64-NEXT:    vpmovzxwd {{.*#+}} ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero,xmm0[4],zero,xmm0[5],zero,xmm0[6],zero,xmm0[7],zero
; AVX-64-NEXT:    vcvtdq2ps %ymm0, %ymm0
; AVX-64-NEXT:    retq
;
; AVX512DQ-32-LABEL: uitofp_v8i1_v8f32:
; AVX512DQ-32:       # %bb.0:
; AVX512DQ-32-NEXT:    vpand {{\.LCPI.*}}, %xmm0, %xmm0
; AVX512DQ-32-NEXT:    vpmovzxwd {{.*#+}} ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero,xmm0[4],zero,xmm0[5],zero,xmm0[6],zero,xmm0[7],zero
; AVX512DQ-32-NEXT:    vcvtdq2ps %ymm0, %ymm0
; AVX512DQ-32-NEXT:    retl
;
; AVX512DQ-64-LABEL: uitofp_v8i1_v8f32:
; AVX512DQ-64:       # %bb.0:
; AVX512DQ-64-NEXT:    vpand {{.*}}(%rip), %xmm0, %xmm0
; AVX512DQ-64-NEXT:    vpmovzxwd {{.*#+}} ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero,xmm0[4],zero,xmm0[5],zero,xmm0[6],zero,xmm0[7],zero
; AVX512DQ-64-NEXT:    vcvtdq2ps %ymm0, %ymm0
; AVX512DQ-64-NEXT:    retq
;
; AVX512DQVL-32-LABEL: uitofp_v8i1_v8f32:
; AVX512DQVL-32:       # %bb.0:
; AVX512DQVL-32-NEXT:    vpand {{\.LCPI.*}}, %xmm0, %xmm0
; AVX512DQVL-32-NEXT:    vpmovzxwd {{.*#+}} ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero,xmm0[4],zero,xmm0[5],zero,xmm0[6],zero,xmm0[7],zero
; AVX512DQVL-32-NEXT:    vcvtdq2ps %ymm0, %ymm0
; AVX512DQVL-32-NEXT:    retl
;
; AVX512DQVL-64-LABEL: uitofp_v8i1_v8f32:
; AVX512DQVL-64:       # %bb.0:
; AVX512DQVL-64-NEXT:    vpand {{.*}}(%rip), %xmm0, %xmm0
; AVX512DQVL-64-NEXT:    vpmovzxwd {{.*#+}} ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero,xmm0[4],zero,xmm0[5],zero,xmm0[6],zero,xmm0[7],zero
; AVX512DQVL-64-NEXT:    vcvtdq2ps %ymm0, %ymm0
; AVX512DQVL-64-NEXT:    retq
 %result = call <8 x float> @llvm.experimental.constrained.uitofp.v8f32.v8i1(<8 x i1> %x,
                                                              metadata !"round.dynamic",
                                                              metadata !"fpexcept.strict") #0
  ret <8 x float> %result
}

define <8 x float> @sitofp_v8i8_v8f32(<8 x i8> %x) #0 {
; CHECK-LABEL: sitofp_v8i8_v8f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmovsxbd %xmm0, %ymm0
; CHECK-NEXT:    vcvtdq2ps %ymm0, %ymm0
; CHECK-NEXT:    ret{{[l|q]}}
 %result = call <8 x float> @llvm.experimental.constrained.sitofp.v8f32.v8i8(<8 x i8> %x,
                                                              metadata !"round.dynamic",
                                                              metadata !"fpexcept.strict") #0
  ret <8 x float> %result
}

define <8 x float> @uitofp_v8i8_v8f32(<8 x i8> %x) #0 {
; CHECK-LABEL: uitofp_v8i8_v8f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmovzxbd {{.*#+}} ymm0 = xmm0[0],zero,zero,zero,xmm0[1],zero,zero,zero,xmm0[2],zero,zero,zero,xmm0[3],zero,zero,zero,xmm0[4],zero,zero,zero,xmm0[5],zero,zero,zero,xmm0[6],zero,zero,zero,xmm0[7],zero,zero,zero
; CHECK-NEXT:    vcvtdq2ps %ymm0, %ymm0
; CHECK-NEXT:    ret{{[l|q]}}
 %result = call <8 x float> @llvm.experimental.constrained.uitofp.v8f32.v8i8(<8 x i8> %x,
                                                              metadata !"round.dynamic",
                                                              metadata !"fpexcept.strict") #0
  ret <8 x float> %result
}

define <8 x float> @sitofp_v8i16_v8f32(<8 x i16> %x) #0 {
; CHECK-LABEL: sitofp_v8i16_v8f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmovsxwd %xmm0, %ymm0
; CHECK-NEXT:    vcvtdq2ps %ymm0, %ymm0
; CHECK-NEXT:    ret{{[l|q]}}
 %result = call <8 x float> @llvm.experimental.constrained.sitofp.v8f32.v8i16(<8 x i16> %x,
                                                              metadata !"round.dynamic",
                                                              metadata !"fpexcept.strict") #0
  ret <8 x float> %result
}

define <8 x float> @uitofp_v8i16_v8f32(<8 x i16> %x) #0 {
; CHECK-LABEL: uitofp_v8i16_v8f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmovzxwd {{.*#+}} ymm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero,xmm0[4],zero,xmm0[5],zero,xmm0[6],zero,xmm0[7],zero
; CHECK-NEXT:    vcvtdq2ps %ymm0, %ymm0
; CHECK-NEXT:    ret{{[l|q]}}
 %result = call <8 x float> @llvm.experimental.constrained.uitofp.v8f32.v8i16(<8 x i16> %x,
                                                              metadata !"round.dynamic",
                                                              metadata !"fpexcept.strict") #0
  ret <8 x float> %result
}

define <8 x float> @sitofp_v8i32_v8f32(<8 x i32> %x) #0 {
; CHECK-LABEL: sitofp_v8i32_v8f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vcvtdq2ps %ymm0, %ymm0
; CHECK-NEXT:    ret{{[l|q]}}
 %result = call <8 x float> @llvm.experimental.constrained.sitofp.v8f32.v8i32(<8 x i32> %x,
                                                              metadata !"round.dynamic",
                                                              metadata !"fpexcept.strict") #0
  ret <8 x float> %result
}

define <8 x float> @uitofp_v8i32_v8f32(<8 x i32> %x) #0 {
; AVX1-LABEL: uitofp_v8i32_v8f32:
; AVX1:       # %bb.0:
; AVX1-NEXT:    vpbroadcastd {{.*#+}} ymm1 = [1258291200,1258291200,1258291200,1258291200,1258291200,1258291200,1258291200,1258291200]
; AVX1-NEXT:    vpblendw {{.*#+}} ymm1 = ymm0[0],ymm1[1],ymm0[2],ymm1[3],ymm0[4],ymm1[5],ymm0[6],ymm1[7],ymm0[8],ymm1[9],ymm0[10],ymm1[11],ymm0[12],ymm1[13],ymm0[14],ymm1[15]
; AVX1-NEXT:    vpsrld $16, %ymm0, %ymm0
; AVX1-NEXT:    vpbroadcastd {{.*#+}} ymm2 = [1392508928,1392508928,1392508928,1392508928,1392508928,1392508928,1392508928,1392508928]
; AVX1-NEXT:    vpblendw {{.*#+}} ymm0 = ymm0[0],ymm2[1],ymm0[2],ymm2[3],ymm0[4],ymm2[5],ymm0[6],ymm2[7],ymm0[8],ymm2[9],ymm0[10],ymm2[11],ymm0[12],ymm2[13],ymm0[14],ymm2[15]
; AVX1-NEXT:    vbroadcastss {{.*#+}} ymm2 = [-5.49764202E+11,-5.49764202E+11,-5.49764202E+11,-5.49764202E+11,-5.49764202E+11,-5.49764202E+11,-5.49764202E+11,-5.49764202E+11]
; AVX1-NEXT:    vaddps %ymm2, %ymm0, %ymm0
; AVX1-NEXT:    vaddps %ymm0, %ymm1, %ymm0
; AVX1-NEXT:    ret{{[l|q]}}
;
; AVX512F-LABEL: uitofp_v8i32_v8f32:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovaps %ymm0, %ymm0
; AVX512F-NEXT:    vcvtudq2ps %zmm0, %zmm0
; AVX512F-NEXT:    # kill: def $ymm0 killed $ymm0 killed $zmm0
; AVX512F-NEXT:    ret{{[l|q]}}
;
; AVX512VL-LABEL: uitofp_v8i32_v8f32:
; AVX512VL:       # %bb.0:
; AVX512VL-NEXT:    vcvtudq2ps %ymm0, %ymm0
; AVX512VL-NEXT:    ret{{[l|q]}}
;
; AVX512DQ-LABEL: uitofp_v8i32_v8f32:
; AVX512DQ:       # %bb.0:
; AVX512DQ-NEXT:    vmovaps %ymm0, %ymm0
; AVX512DQ-NEXT:    vcvtudq2ps %zmm0, %zmm0
; AVX512DQ-NEXT:    # kill: def $ymm0 killed $ymm0 killed $zmm0
; AVX512DQ-NEXT:    ret{{[l|q]}}
;
; AVX512DQVL-LABEL: uitofp_v8i32_v8f32:
; AVX512DQVL:       # %bb.0:
; AVX512DQVL-NEXT:    vcvtudq2ps %ymm0, %ymm0
; AVX512DQVL-NEXT:    ret{{[l|q]}}
 %result = call <8 x float> @llvm.experimental.constrained.uitofp.v8f32.v8i32(<8 x i32> %x,
                                                              metadata !"round.dynamic",
                                                              metadata !"fpexcept.strict") #0
  ret <8 x float> %result
}

define <4 x double> @sitofp_v4i1_v4f64(<4 x i1> %x) #0 {
; CHECK-LABEL: sitofp_v4i1_v4f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpslld $31, %xmm0, %xmm0
; CHECK-NEXT:    vpsrad $31, %xmm0, %xmm0
; CHECK-NEXT:    vcvtdq2pd %xmm0, %ymm0
; CHECK-NEXT:    ret{{[l|q]}}
 %result = call <4 x double> @llvm.experimental.constrained.sitofp.v4f64.v4i1(<4 x i1> %x,
                                                              metadata !"round.dynamic",
                                                              metadata !"fpexcept.strict") #0
  ret <4 x double> %result
}

define <4 x double> @uitofp_v4i1_v4f64(<4 x i1> %x) #0 {
; AVX1-LABEL: uitofp_v4i1_v4f64:
; AVX1:       # %bb.0:
; AVX1-NEXT:    vbroadcastss {{.*#+}} xmm1 = [1,1,1,1]
; AVX1-NEXT:    vandps %xmm1, %xmm0, %xmm0
; AVX1-NEXT:    vcvtdq2pd %xmm0, %ymm0
; AVX1-NEXT:    ret{{[l|q]}}
;
; AVX512F-LABEL: uitofp_v4i1_v4f64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vbroadcastss {{.*#+}} xmm1 = [1,1,1,1]
; AVX512F-NEXT:    vandps %xmm1, %xmm0, %xmm0
; AVX512F-NEXT:    vcvtdq2pd %xmm0, %ymm0
; AVX512F-NEXT:    ret{{[l|q]}}
;
; AVX512VL-32-LABEL: uitofp_v4i1_v4f64:
; AVX512VL-32:       # %bb.0:
; AVX512VL-32-NEXT:    vpandd {{\.LCPI.*}}{1to4}, %xmm0, %xmm0
; AVX512VL-32-NEXT:    vcvtdq2pd %xmm0, %ymm0
; AVX512VL-32-NEXT:    retl
;
; AVX512VL-64-LABEL: uitofp_v4i1_v4f64:
; AVX512VL-64:       # %bb.0:
; AVX512VL-64-NEXT:    vpandd {{.*}}(%rip){1to4}, %xmm0, %xmm0
; AVX512VL-64-NEXT:    vcvtdq2pd %xmm0, %ymm0
; AVX512VL-64-NEXT:    retq
;
; AVX512DQ-LABEL: uitofp_v4i1_v4f64:
; AVX512DQ:       # %bb.0:
; AVX512DQ-NEXT:    vbroadcastss {{.*#+}} xmm1 = [1,1,1,1]
; AVX512DQ-NEXT:    vandps %xmm1, %xmm0, %xmm0
; AVX512DQ-NEXT:    vcvtdq2pd %xmm0, %ymm0
; AVX512DQ-NEXT:    ret{{[l|q]}}
;
; AVX512DQVL-32-LABEL: uitofp_v4i1_v4f64:
; AVX512DQVL-32:       # %bb.0:
; AVX512DQVL-32-NEXT:    vandps {{\.LCPI.*}}{1to4}, %xmm0, %xmm0
; AVX512DQVL-32-NEXT:    vcvtdq2pd %xmm0, %ymm0
; AVX512DQVL-32-NEXT:    retl
;
; AVX512DQVL-64-LABEL: uitofp_v4i1_v4f64:
; AVX512DQVL-64:       # %bb.0:
; AVX512DQVL-64-NEXT:    vandps {{.*}}(%rip){1to4}, %xmm0, %xmm0
; AVX512DQVL-64-NEXT:    vcvtdq2pd %xmm0, %ymm0
; AVX512DQVL-64-NEXT:    retq
 %result = call <4 x double> @llvm.experimental.constrained.uitofp.v4f64.v4i1(<4 x i1> %x,
                                                              metadata !"round.dynamic",
                                                              metadata !"fpexcept.strict") #0
  ret <4 x double> %result
}

define <4 x double> @sitofp_v4i8_v4f64(<4 x i8> %x) #0 {
; CHECK-LABEL: sitofp_v4i8_v4f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmovsxbd %xmm0, %xmm0
; CHECK-NEXT:    vcvtdq2pd %xmm0, %ymm0
; CHECK-NEXT:    ret{{[l|q]}}
 %result = call <4 x double> @llvm.experimental.constrained.sitofp.v4f64.v4i8(<4 x i8> %x,
                                                              metadata !"round.dynamic",
                                                              metadata !"fpexcept.strict") #0
  ret <4 x double> %result
}

define <4 x double> @uitofp_v4i8_v4f64(<4 x i8> %x) #0 {
; CHECK-LABEL: uitofp_v4i8_v4f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmovzxbd {{.*#+}} xmm0 = xmm0[0],zero,zero,zero,xmm0[1],zero,zero,zero,xmm0[2],zero,zero,zero,xmm0[3],zero,zero,zero
; CHECK-NEXT:    vcvtdq2pd %xmm0, %ymm0
; CHECK-NEXT:    ret{{[l|q]}}
 %result = call <4 x double> @llvm.experimental.constrained.uitofp.v4f64.v4i8(<4 x i8> %x,
                                                              metadata !"round.dynamic",
                                                              metadata !"fpexcept.strict") #0
  ret <4 x double> %result
}

define <4 x double> @sitofp_v4i16_v4f64(<4 x i16> %x) #0 {
; CHECK-LABEL: sitofp_v4i16_v4f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmovsxwd %xmm0, %xmm0
; CHECK-NEXT:    vcvtdq2pd %xmm0, %ymm0
; CHECK-NEXT:    ret{{[l|q]}}
 %result = call <4 x double> @llvm.experimental.constrained.sitofp.v4f64.v4i16(<4 x i16> %x,
                                                              metadata !"round.dynamic",
                                                              metadata !"fpexcept.strict") #0
  ret <4 x double> %result
}

define <4 x double> @uitofp_v4i16_v4f64(<4 x i16> %x) #0 {
; CHECK-LABEL: uitofp_v4i16_v4f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vpmovzxwd {{.*#+}} xmm0 = xmm0[0],zero,xmm0[1],zero,xmm0[2],zero,xmm0[3],zero
; CHECK-NEXT:    vcvtdq2pd %xmm0, %ymm0
; CHECK-NEXT:    ret{{[l|q]}}
 %result = call <4 x double> @llvm.experimental.constrained.uitofp.v4f64.v4i16(<4 x i16> %x,
                                                              metadata !"round.dynamic",
                                                              metadata !"fpexcept.strict") #0
  ret <4 x double> %result
}

define <4 x double> @sitofp_v4i32_v4f64(<4 x i32> %x) #0 {
; CHECK-LABEL: sitofp_v4i32_v4f64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vcvtdq2pd %xmm0, %ymm0
; CHECK-NEXT:    ret{{[l|q]}}
 %result = call <4 x double> @llvm.experimental.constrained.sitofp.v4f64.v4i32(<4 x i32> %x,
                                                              metadata !"round.dynamic",
                                                              metadata !"fpexcept.strict") #0
  ret <4 x double> %result
}

define <4 x double> @uitofp_v4i32_v4f64(<4 x i32> %x) #0 {
; AVX1-LABEL: uitofp_v4i32_v4f64:
; AVX1:       # %bb.0:
; AVX1-NEXT:    vpsrld $16, %xmm0, %xmm1
; AVX1-NEXT:    vcvtdq2pd %xmm1, %ymm1
; AVX1-NEXT:    vbroadcastsd {{.*#+}} ymm2 = [6.5536E+4,6.5536E+4,6.5536E+4,6.5536E+4]
; AVX1-NEXT:    vmulpd %ymm2, %ymm1, %ymm1
; AVX1-NEXT:    vxorpd %xmm2, %xmm2, %xmm2
; AVX1-NEXT:    vpblendw {{.*#+}} xmm0 = xmm0[0],xmm2[1],xmm0[2],xmm2[3],xmm0[4],xmm2[5],xmm0[6],xmm2[7]
; AVX1-NEXT:    vcvtdq2pd %xmm0, %ymm0
; AVX1-NEXT:    vaddpd %ymm0, %ymm1, %ymm0
; AVX1-NEXT:    ret{{[l|q]}}
;
; AVX512F-LABEL: uitofp_v4i32_v4f64:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    vmovaps %xmm0, %xmm0
; AVX512F-NEXT:    vcvtudq2pd %ymm0, %zmm0
; AVX512F-NEXT:    # kill: def $ymm0 killed $ymm0 killed $zmm0
; AVX512F-NEXT:    ret{{[l|q]}}
;
; AVX512VL-LABEL: uitofp_v4i32_v4f64:
; AVX512VL:       # %bb.0:
; AVX512VL-NEXT:    vcvtudq2pd %xmm0, %ymm0
; AVX512VL-NEXT:    ret{{[l|q]}}
;
; AVX512DQ-LABEL: uitofp_v4i32_v4f64:
; AVX512DQ:       # %bb.0:
; AVX512DQ-NEXT:    vmovaps %xmm0, %xmm0
; AVX512DQ-NEXT:    vcvtudq2pd %ymm0, %zmm0
; AVX512DQ-NEXT:    # kill: def $ymm0 killed $ymm0 killed $zmm0
; AVX512DQ-NEXT:    ret{{[l|q]}}
;
; AVX512DQVL-LABEL: uitofp_v4i32_v4f64:
; AVX512DQVL:       # %bb.0:
; AVX512DQVL-NEXT:    vcvtudq2pd %xmm0, %ymm0
; AVX512DQVL-NEXT:    ret{{[l|q]}}
 %result = call <4 x double> @llvm.experimental.constrained.uitofp.v4f64.v4i32(<4 x i32> %x,
                                                              metadata !"round.dynamic",
                                                              metadata !"fpexcept.strict") #0
  ret <4 x double> %result
}

define <4 x double> @sitofp_v4i64_v4f64(<4 x i64> %x) #0 {
; AVX-32-LABEL: sitofp_v4i64_v4f64:
; AVX-32:       # %bb.0:
; AVX-32-NEXT:    pushl %ebp
; AVX-32-NEXT:    .cfi_def_cfa_offset 8
; AVX-32-NEXT:    .cfi_offset %ebp, -8
; AVX-32-NEXT:    movl %esp, %ebp
; AVX-32-NEXT:    .cfi_def_cfa_register %ebp
; AVX-32-NEXT:    andl $-8, %esp
; AVX-32-NEXT:    subl $64, %esp
; AVX-32-NEXT:    vmovlps %xmm0, {{[0-9]+}}(%esp)
; AVX-32-NEXT:    vpermilps {{.*#+}} xmm1 = xmm0[2,3,0,1]
; AVX-32-NEXT:    vmovlps %xmm1, {{[0-9]+}}(%esp)
; AVX-32-NEXT:    vextractf128 $1, %ymm0, %xmm0
; AVX-32-NEXT:    vmovlps %xmm0, {{[0-9]+}}(%esp)
; AVX-32-NEXT:    vpermilps {{.*#+}} xmm0 = xmm0[2,3,0,1]
; AVX-32-NEXT:    vmovlps %xmm0, {{[0-9]+}}(%esp)
; AVX-32-NEXT:    fildll {{[0-9]+}}(%esp)
; AVX-32-NEXT:    fstpl {{[0-9]+}}(%esp)
; AVX-32-NEXT:    fildll {{[0-9]+}}(%esp)
; AVX-32-NEXT:    fstpl {{[0-9]+}}(%esp)
; AVX-32-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; AVX-32-NEXT:    vmovhps {{.*#+}} xmm0 = xmm0[0,1],mem[0,1]
; AVX-32-NEXT:    fildll {{[0-9]+}}(%esp)
; AVX-32-NEXT:    fstpl {{[0-9]+}}(%esp)
; AVX-32-NEXT:    fildll {{[0-9]+}}(%esp)
; AVX-32-NEXT:    fstpl (%esp)
; AVX-32-NEXT:    vmovsd {{.*#+}} xmm1 = mem[0],zero
; AVX-32-NEXT:    vmovhps {{.*#+}} xmm1 = xmm1[0,1],mem[0,1]
; AVX-32-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX-32-NEXT:    movl %ebp, %esp
; AVX-32-NEXT:    popl %ebp
; AVX-32-NEXT:    .cfi_def_cfa %esp, 4
; AVX-32-NEXT:    retl
;
; AVX-64-LABEL: sitofp_v4i64_v4f64:
; AVX-64:       # %bb.0:
; AVX-64-NEXT:    vextracti128 $1, %ymm0, %xmm1
; AVX-64-NEXT:    vpextrq $1, %xmm1, %rax
; AVX-64-NEXT:    vcvtsi2sd %rax, %xmm2, %xmm2
; AVX-64-NEXT:    vmovq %xmm1, %rax
; AVX-64-NEXT:    vcvtsi2sd %rax, %xmm3, %xmm1
; AVX-64-NEXT:    vunpcklpd {{.*#+}} xmm1 = xmm1[0],xmm2[0]
; AVX-64-NEXT:    vpextrq $1, %xmm0, %rax
; AVX-64-NEXT:    vcvtsi2sd %rax, %xmm3, %xmm2
; AVX-64-NEXT:    vmovq %xmm0, %rax
; AVX-64-NEXT:    vcvtsi2sd %rax, %xmm3, %xmm0
; AVX-64-NEXT:    vunpcklpd {{.*#+}} xmm0 = xmm0[0],xmm2[0]
; AVX-64-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm0
; AVX-64-NEXT:    retq
;
; AVX512DQ-LABEL: sitofp_v4i64_v4f64:
; AVX512DQ:       # %bb.0:
; AVX512DQ-NEXT:    vmovaps %ymm0, %ymm0
; AVX512DQ-NEXT:    vcvtqq2pd %zmm0, %zmm0
; AVX512DQ-NEXT:    # kill: def $ymm0 killed $ymm0 killed $zmm0
; AVX512DQ-NEXT:    ret{{[l|q]}}
;
; AVX512DQVL-LABEL: sitofp_v4i64_v4f64:
; AVX512DQVL:       # %bb.0:
; AVX512DQVL-NEXT:    vcvtqq2pd %ymm0, %ymm0
; AVX512DQVL-NEXT:    ret{{[l|q]}}
 %result = call <4 x double> @llvm.experimental.constrained.sitofp.v4f64.v4i64(<4 x i64> %x,
                                                              metadata !"round.dynamic",
                                                              metadata !"fpexcept.strict") #0
  ret <4 x double> %result
}

define <4 x double> @uitofp_v4i64_v4f64(<4 x i64> %x) #0 {
; AVX1-32-LABEL: uitofp_v4i64_v4f64:
; AVX1-32:       # %bb.0:
; AVX1-32-NEXT:    vpsrlq $32, %ymm0, %ymm1
; AVX1-32-NEXT:    vpor {{\.LCPI.*}}, %ymm1, %ymm1
; AVX1-32-NEXT:    vbroadcastsd {{.*#+}} ymm2 = [1.9342813118337666E+25,1.9342813118337666E+25,1.9342813118337666E+25,1.9342813118337666E+25]
; AVX1-32-NEXT:    vsubpd %ymm2, %ymm1, %ymm1
; AVX1-32-NEXT:    vxorpd %xmm2, %xmm2, %xmm2
; AVX1-32-NEXT:    vpblendd {{.*#+}} ymm0 = ymm0[0],ymm2[1],ymm0[2],ymm2[3],ymm0[4],ymm2[5],ymm0[6],ymm2[7]
; AVX1-32-NEXT:    vpor {{\.LCPI.*}}, %ymm0, %ymm0
; AVX1-32-NEXT:    vaddpd %ymm1, %ymm0, %ymm0
; AVX1-32-NEXT:    retl
;
; AVX1-64-LABEL: uitofp_v4i64_v4f64:
; AVX1-64:       # %bb.0:
; AVX1-64-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; AVX1-64-NEXT:    vpblendd {{.*#+}} ymm1 = ymm0[0],ymm1[1],ymm0[2],ymm1[3],ymm0[4],ymm1[5],ymm0[6],ymm1[7]
; AVX1-64-NEXT:    vpbroadcastq {{.*#+}} ymm2 = [4841369599423283200,4841369599423283200,4841369599423283200,4841369599423283200]
; AVX1-64-NEXT:    vpor %ymm2, %ymm1, %ymm1
; AVX1-64-NEXT:    vpsrlq $32, %ymm0, %ymm0
; AVX1-64-NEXT:    vpbroadcastq {{.*#+}} ymm2 = [4985484787499139072,4985484787499139072,4985484787499139072,4985484787499139072]
; AVX1-64-NEXT:    vpor %ymm2, %ymm0, %ymm0
; AVX1-64-NEXT:    vbroadcastsd {{.*#+}} ymm2 = [1.9342813118337666E+25,1.9342813118337666E+25,1.9342813118337666E+25,1.9342813118337666E+25]
; AVX1-64-NEXT:    vsubpd %ymm2, %ymm0, %ymm0
; AVX1-64-NEXT:    vaddpd %ymm0, %ymm1, %ymm0
; AVX1-64-NEXT:    retq
;
; AVX512F-32-LABEL: uitofp_v4i64_v4f64:
; AVX512F-32:       # %bb.0:
; AVX512F-32-NEXT:    vpsrlq $32, %ymm0, %ymm1
; AVX512F-32-NEXT:    vpor {{\.LCPI.*}}, %ymm1, %ymm1
; AVX512F-32-NEXT:    vbroadcastsd {{.*#+}} ymm2 = [1.9342813118337666E+25,1.9342813118337666E+25,1.9342813118337666E+25,1.9342813118337666E+25]
; AVX512F-32-NEXT:    vsubpd %ymm2, %ymm1, %ymm1
; AVX512F-32-NEXT:    vxorpd %xmm2, %xmm2, %xmm2
; AVX512F-32-NEXT:    vpblendd {{.*#+}} ymm0 = ymm0[0],ymm2[1],ymm0[2],ymm2[3],ymm0[4],ymm2[5],ymm0[6],ymm2[7]
; AVX512F-32-NEXT:    vpor {{\.LCPI.*}}, %ymm0, %ymm0
; AVX512F-32-NEXT:    vaddpd %ymm1, %ymm0, %ymm0
; AVX512F-32-NEXT:    retl
;
; AVX512F-64-LABEL: uitofp_v4i64_v4f64:
; AVX512F-64:       # %bb.0:
; AVX512F-64-NEXT:    vpxor %xmm1, %xmm1, %xmm1
; AVX512F-64-NEXT:    vpblendd {{.*#+}} ymm1 = ymm0[0],ymm1[1],ymm0[2],ymm1[3],ymm0[4],ymm1[5],ymm0[6],ymm1[7]
; AVX512F-64-NEXT:    vpbroadcastq {{.*#+}} ymm2 = [4841369599423283200,4841369599423283200,4841369599423283200,4841369599423283200]
; AVX512F-64-NEXT:    vpor %ymm2, %ymm1, %ymm1
; AVX512F-64-NEXT:    vpsrlq $32, %ymm0, %ymm0
; AVX512F-64-NEXT:    vpbroadcastq {{.*#+}} ymm2 = [4985484787499139072,4985484787499139072,4985484787499139072,4985484787499139072]
; AVX512F-64-NEXT:    vpor %ymm2, %ymm0, %ymm0
; AVX512F-64-NEXT:    vbroadcastsd {{.*#+}} ymm2 = [1.9342813118337666E+25,1.9342813118337666E+25,1.9342813118337666E+25,1.9342813118337666E+25]
; AVX512F-64-NEXT:    vsubpd %ymm2, %ymm0, %ymm0
; AVX512F-64-NEXT:    vaddpd %ymm0, %ymm1, %ymm0
; AVX512F-64-NEXT:    retq
;
; AVX512VL-32-LABEL: uitofp_v4i64_v4f64:
; AVX512VL-32:       # %bb.0:
; AVX512VL-32-NEXT:    vpand {{\.LCPI.*}}, %ymm0, %ymm1
; AVX512VL-32-NEXT:    vpor {{\.LCPI.*}}, %ymm1, %ymm1
; AVX512VL-32-NEXT:    vpsrlq $32, %ymm0, %ymm0
; AVX512VL-32-NEXT:    vpor {{\.LCPI.*}}, %ymm0, %ymm0
; AVX512VL-32-NEXT:    vsubpd {{\.LCPI.*}}{1to4}, %ymm0, %ymm0
; AVX512VL-32-NEXT:    vaddpd %ymm0, %ymm1, %ymm0
; AVX512VL-32-NEXT:    retl
;
; AVX512VL-64-LABEL: uitofp_v4i64_v4f64:
; AVX512VL-64:       # %bb.0:
; AVX512VL-64-NEXT:    vpandq {{.*}}(%rip){1to4}, %ymm0, %ymm1
; AVX512VL-64-NEXT:    vporq {{.*}}(%rip){1to4}, %ymm1, %ymm1
; AVX512VL-64-NEXT:    vpsrlq $32, %ymm0, %ymm0
; AVX512VL-64-NEXT:    vporq {{.*}}(%rip){1to4}, %ymm0, %ymm0
; AVX512VL-64-NEXT:    vsubpd {{.*}}(%rip){1to4}, %ymm0, %ymm0
; AVX512VL-64-NEXT:    vaddpd %ymm0, %ymm1, %ymm0
; AVX512VL-64-NEXT:    retq
;
; AVX512DQ-LABEL: uitofp_v4i64_v4f64:
; AVX512DQ:       # %bb.0:
; AVX512DQ-NEXT:    vmovaps %ymm0, %ymm0
; AVX512DQ-NEXT:    vcvtuqq2pd %zmm0, %zmm0
; AVX512DQ-NEXT:    # kill: def $ymm0 killed $ymm0 killed $zmm0
; AVX512DQ-NEXT:    ret{{[l|q]}}
;
; AVX512DQVL-LABEL: uitofp_v4i64_v4f64:
; AVX512DQVL:       # %bb.0:
; AVX512DQVL-NEXT:    vcvtuqq2pd %ymm0, %ymm0
; AVX512DQVL-NEXT:    ret{{[l|q]}}
 %result = call <4 x double> @llvm.experimental.constrained.uitofp.v4f64.v4i64(<4 x i64> %x,
                                                              metadata !"round.dynamic",
                                                              metadata !"fpexcept.strict") #0
  ret <4 x double> %result
}

attributes #0 = { strictfp }
